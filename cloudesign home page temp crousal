//Orignal----


"use client";
import React, { useCallback, useEffect, useRef, useState } from "react";
import Image from "next/image";
import PrevButton from "./assets/prevButton.svg";
import NextButton from "./assets/nextButton.svg";

const ButtonsNames = [
  "Partnerships and Case Studies",
  "Innovation and Engineering",
  "Awards, Press Releases",
  "Life, Culture and People",
];

export default function HomePageCarousel({ datas }) {
  const [currentImage, setCurrentImage] = useState(0);
  const [isTransitionEnabled, setTransitionEnabled] = useState(true);
  const [imagesLoaded, setImagesLoaded] = useState<boolean[]>(new Array(datas.length).fill(false));

  // Auto slide every 5s
  useEffect(() => {
    const interval = setInterval(() => {
      if (currentImage === datas.length - 1) {
        setTransitionEnabled(false);
        setCurrentImage(0);
      } else {
        setTransitionEnabled(true);
        setCurrentImage((prevIndex) => prevIndex + 1);
      }
    }, 5000);

    return () => clearInterval(interval);
  }, [currentImage, datas.length]);

  const currentImageRef = useRef(0);
  const handleDotClick = useCallback((index: number) => {
    setTransitionEnabled(true);
    setCurrentImage(index);
  }, []);

  useEffect(() => {
    if (!isTransitionEnabled) {
      const timeout = setTimeout(() => {
        setTransitionEnabled(true);
      }, 50);
      return () => clearTimeout(timeout);
    }
  }, [isTransitionEnabled]);

  const handleImageLoad = useCallback((index: number) => {
    setImagesLoaded((prev) => {
      const newState = [...prev];
      newState[index] = true;
      return newState;
    });
  }, []);

  return (
    <div className="relative h-screen 4xl:max-w-[1600px] 4xl:mx-auto 4xl:h-[800px] bg-[#02010D]">
      <div className="overflow-hidden relative h-full">
        <div
          className={`flex w-full ${isTransitionEnabled ? "transition-transform duration-500" : ""}`}
          style={{ transform: `translateX(-${currentImage * 100}%)` }}
        >
          {datas.map((item, index) => (
            <div key={index} className="relative flex-shrink-0 w-full h-screen 4xl:h-[800px]">
              {/* Background Image  */}
              <Image
                src={item.bgImage}
                alt={`Background ${index}`}
                className="w-full h-full object-cover"
                priority={index === 0}
                loading={index === 0 ? "eager" : "lazy"}
                quality={75}
                fill
                sizes="100vw"
              />

              <div className="absolute top-0 left-0 right-0 h-full flex items-center text-white px-4 sm:px-8 md:px-[5%]">
                <div className="container mx-auto flex max-lg:flex-wrap-reverse lg:flex-row items-center justify-between gap-10">
                  <div className="w-full max-w-[620px] z-10">
                    <div className="text-sm md:text-lg text-slate-300 mb-2">
                      {item.content1}
                    </div>
                    <h2 className="text-2xl sm:text-3xl md:text-4xl xl:text-5xl leading-snug xl:leading-[55px] mb-4">
                      {item.content2}
                    </h2>
                    <p className="text-sm sm:text-base md:text-lg text-[#808285]">
                      {item.content3}
                    </p>
                  </div>

                  {item.image && (
                    <div
                      className={`w-full ${index === 3
                        ? "lg:max-w-[550px] 2xl:max-w-[700px]"
                        : "lg:max-w-[700px] xl:max-w-[1050px]"}`}
                    >
                      {/* Hero Image - Critical Optimizations */}
                      <Image
                        src={item.image}
                        alt="Banner Image"
                        className="w-full h-auto object-cover"
                        priority={index === 0}
                        loading={index === 0 ? "eager" : "lazy"}
                        quality={index === 0 ? 90 : index === 1 ? 85 : 70}
                        width={1200}
                        height={600}
                        sizes="
                          (max-width: 640px) 100vw,   /* mobile: use full width */
                          (max-width: 1024px) 80vw,   /* tablet: smaller width */
                          (max-width: 1280px) 60vw,   /* laptop */
                          1200px                      /* large desktop */
                        "
                        onLoad={() => handleImageLoad(index)}
                        style={{ maxWidth: "100%", height: "auto" }}
                      />

                      {/* Loading placeholder for non-loaded images */}
                      {!imagesLoaded[index] && index <= 1 && (
                        <div className="absolute inset-0 bg-gray-800 animate-pulse rounded" />
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Desktop buttons */}
      <div className="absolute bottom-12 max-md:hidden w-full px-5 md:px-[105px]">
        <div className="container mx-auto flex justify-between text-[#585858] cursor-pointer text-xs md:text-sm lg:text-base">
          {ButtonsNames.map((el, index) => (
            <div
              key={index}
              className={`border-t-2 pt-2 w-[18%] text-center whitespace-nowrap 
                ${currentImage === index ? "border-white text-white" : "border-[#585858] hover:border-white hover:text-white"}`}
              onClick={() => handleDotClick(index)}
            >
              {el}
            </div>
          ))}
        </div>
      </div>

      {/* Mobile buttons */}
      <div className="absolute bottom-[30px] w-full px-5 flex md:hidden justify-between items-center text-[#585858]">
        <div className="text-sm flex-shrink-0">
          {currentImage + 1} / {ButtonsNames.length}
        </div>
        <div className="flex-1 mx-4">
          <div className="flex justify-between">
            {ButtonsNames.map((_, index) => (
              <div
                key={index}
                className={`border-t-2 w-full mx-0.5 ${currentImage === index ? "border-white" : "border-[#585858]"}`}
              />
            ))}
          </div>
          <div className="text-xs mt-1 text-white text-center">
            {ButtonsNames[currentImage]}
          </div>
        </div>
        <div className="flex gap-2 w-14 justify-end">
          <div onClick={() => handleDotClick(Math.max(0, currentImage - 1))}>
            <Image src={PrevButton} alt="prev button" />
          </div>
          <div onClick={() => handleDotClick(Math.min(ButtonsNames.length - 1, currentImage + 1))}>
            <Image src={NextButton} alt="Next button" />
          </div>
        </div>
      </div>
    </div>
  );
}
