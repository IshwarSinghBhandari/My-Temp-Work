import React, { useState, useRef, useEffect } from "react";
import {
  Camera,
  FileUp as UploadCloud,
  Repeat,
  CheckCircle,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";

export default function App() {
  const labels = [
    "Attach LR First Copy",
    "Attach LR Back Copy",
    "Attach Unloading Receipt",
  ];

  const [uploadedFiles, setUploadedFiles] = useState([null, null, null]);
  const [activeIndex, setActiveIndex] = useState(null);
  const [showCameraModal, setShowCameraModal] = useState(false);
  const [cameras, setCameras] = useState([]);
  const [currentCameraIndex, setCurrentCameraIndex] = useState(0);

  const videoRef = useRef(null);
  const canvasRef = useRef(null);

  // Handle file selection from input
  const handleFileChange = (e, index) => {
    const file = e.target.files?.[0];
    if (file) {
      const newFiles = [...uploadedFiles];
      newFiles[index] = file;
      setUploadedFiles(newFiles);
      console.log(`File selected for "${labels[index]}":`, file);
    }
  };

  // Start camera stream
  const startStream = async (deviceId) => {
    try {
      const constraints = deviceId
        ? { video: { deviceId: { exact: deviceId } } }
        : { video: { facingMode: "environment" } };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
      return stream;
    } catch (error) {
      console.error("Error starting camera:", error);
      setShowCameraModal(false);
    }
  };

  // Load camera list when modal opens
  useEffect(() => {
    let stream;
    if (showCameraModal) {
      navigator.mediaDevices
        .enumerateDevices()
        .then((devices) => {
          const videoDevices = devices.filter((d) => d.kind === "videoinput");
          setCameras(videoDevices);
          if (videoDevices.length > 0) {
            startStream(videoDevices[currentCameraIndex]?.deviceId).then(
              (s) => (stream = s)
            );
          }
        })
        .catch(() => setShowCameraModal(false));
    }
    return () => {
      if (stream) {
        stream.getTracks().forEach((track) => track.stop());
      }
    };
  }, [showCameraModal, currentCameraIndex]);

  const switchCamera = () => {
    if (cameras.length > 1) {
      setCurrentCameraIndex((prev) => (prev + 1) % cameras.length);
    }
  };

  // Take photo from camera
  const takePhoto = () => {
    if (!videoRef.current || !canvasRef.current || activeIndex === null) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    canvas.toBlob((blob) => {
      if (blob) {
        const capturedFile = new File([blob], `photo-${Date.now()}.png`, {
          type: "image/png",
        });
        const newFiles = [...uploadedFiles];
        newFiles[activeIndex] = capturedFile;
        setUploadedFiles(newFiles);
        console.log(
          `Photo captured for "${labels[activeIndex]}":`,
          capturedFile
        );
      }
      setShowCameraModal(false);
      setActiveIndex(null);
    }, "image/png");
  };

  return (
    <div className='h-full flex flex-col items-center justify-start p-4 '>
      <div className='max-w-md w-full bg-card border rounded-sm p-6 shadow-lg my-12'>
        <h1 className='text-2xl font-bold mb-4 text-center'>Acknowledge LR</h1>
        <p className='text-center text-muted-foreground mb-8'>
          Please upload or take a photo of your required documents.
        </p>

        <div className='space-y-6'>
          {labels.map((label, index) => (
            <div
              key={index}
              className='flex flex-col gap-3 p-4 bg-muted/50 rounded-lg border'
            >
              <label className='text-sm font-medium'>{label}</label>
              <div className='flex items-center gap-3'>
                <label className='flex-1 relative cursor-pointer'>
                  <Input
                    type='file'
                    onChange={(e) => handleFileChange(e, index)}
                    className='sr-only'
                    accept='image/*, .pdf'
                  />
                  <div className='flex items-center justify-center gap-2 p-3 border-2 border-dashed rounded-lg hover:bg-accent/10 transition-colors'>
                    <UploadCloud className='w-5 h-5 text-primary' />
                    <span className='text-sm font-medium text-primary'>
                      {uploadedFiles[index] ? "Change file" : "Choose file"}
                    </span>
                  </div>
                </label>

                <Button
                  variant='outline'
                  size='icon'
                  onClick={() => {
                    setActiveIndex(index);
                    setShowCameraModal(true);
                  }}
                  className='h-12 w-12 rounded-md'
                >
                  <Camera className='w-5.5! h-5.5!' />
                </Button>
              </div>

              {uploadedFiles[index] && (
                <div className='flex items-center gap-2 mt-1 text-sm text-green-600'>
                  <CheckCircle className='w-4 h-4' />
                  <span>
                    Selected:{" "}
                    <span className='font-medium'>
                      {uploadedFiles[index].name}
                    </span>
                  </span>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Camera Modal */}
        <Dialog open={showCameraModal} onOpenChange={setShowCameraModal}>
          <DialogContent className='p-4 sm:p-6 rounded-xl max-w-sm w-full mx-auto'>
            <DialogHeader className='text-center'>
              <DialogTitle className='text-lg font-semibold'>
                Take a Photo
              </DialogTitle>
            </DialogHeader>

            <div className='flex flex-col items-center gap-4'>
              <video
                ref={videoRef}
                autoPlay
                playsInline
                className='w-full rounded-lg bg-black object-contain aspect-video'
              />
              <canvas ref={canvasRef} style={{ display: "none" }} />

              <div className='flex items-center justify-center gap-4 w-full'>
                <Button
                  variant='default'
                  size='icon'
                  onClick={takePhoto}
                  className='h-12 w-12 rounded-xl'
                >
                  <Camera className='w-6 h-6' />
                </Button>

                {cameras.length > 1 && (
                  <Button
                    variant='secondary'
                    size='icon'
                    onClick={switchCamera}
                    className='h-12 w-12 rounded-xl'
                  >
                    <Repeat className='w-5 h-5' />
                  </Button>
                )}
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
