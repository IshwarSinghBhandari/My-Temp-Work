"use client";

import React, { useRef, useState, useCallback } from "react";
import {
  GoogleMap,
  useJsApiLoader,
  MarkerClustererF,
  MarkerF,
  OverlayViewF,
} from "@react-google-maps/api";
import { CLUSTER_MARK, ENV_CONSTANT } from "@/utils/constants";
import { useSelector } from "react-redux";
import { RootState } from "@/store";
import { darkStyle, lightStyle } from "@/utils/color/mapThemeColor";
import { useVehicleTracking } from "@/hooks/useVehicleTracking";

// Map container style
const containerStyle = { width: "100%", height: "100%" };

// Google Maps API key
const googleMapsApiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || "";

const ClusterMapComponent: React.FC<{ allLocations: any[] }> = ({ allLocations }) => {
  const closeInfoWindowTimeout = useRef<NodeJS.Timeout | null>(null);
  const mapRef = useRef<google.maps.Map | null>(null);

  // Currently hovered marker
  const [activeTrip, setActiveTrip] = useState<any | null>(null);

  const themeMode = useSelector((state: RootState) => state.theme.mode);

  const { isLoaded, loadError } = useJsApiLoader({
    googleMapsApiKey,
    id: "google-map-script",
  });

  // Initial map center calculated once
  const [center] = useState(() => {
    if (
      allLocations.length > 0 &&
      allLocations[0].vehicle?.currentLocation?.lat &&
      allLocations[0].vehicle?.currentLocation?.lng
    ) {
      return {
        lat: Number(allLocations[0].vehicle.currentLocation.lat),
        lng: Number(allLocations[0].vehicle.currentLocation.lng),
      };
    }
    // Default: center of India
    return {
      lat: parseFloat(ENV_CONSTANT.LAT_MAP || "0"),
      lng: parseFloat(ENV_CONSTANT.LNG_MAP || "0"),
    };
  });

  // Store map instance
  const onMapLoad = useCallback((map: google.maps.Map): void => {
    mapRef.current = map;
  }, []);

  // Hover handlers
  const handleMarkerMouseOver = useCallback((trip: any) => {
    if (closeInfoWindowTimeout.current) clearTimeout(closeInfoWindowTimeout.current);
    setActiveTrip(trip);
  }, []);

  const handleMarkerMouseOut = useCallback(() => {
    closeInfoWindowTimeout.current = setTimeout(() => setActiveTrip(null), 100);
  }, []);

  if (loadError) return <div className="h-full p-4">Error loading maps</div>;
  if (!isLoaded) return <div className="h-full p-4">Loading maps...</div>;

  const mapThemeStyle = themeMode === "dark" ? darkStyle : lightStyle;

  // Truck icon
  const truckIcon = {
    url: ENV_CONSTANT.MAP_TRUCK_IMAGE || "",
    scaledSize: new window.google.maps.Size(40, 40),
  };

  // Cluster marker styles
  const clusterStyles = [
    { url: CLUSTER_MARK.BLUE || "", height: 60, width: 60, textColor: 'white', textSize: 14, index: 1 },
    { url: CLUSTER_MARK.YELLOW || "", height: 60, width: 60, textColor: 'white', textSize: 14, index: 2 },
    { url: CLUSTER_MARK.ORANGE || "", height: 60, width: 60, textColor: 'white', textSize: 14, index: 3 },
    { url: CLUSTER_MARK.RED || "", height: 60, width: 60, textColor: 'white', textSize: 14, index: 4 },
  ];

  // Determine cluster style based on marker count
  const clusterCalculator = (markers: google.maps.Marker[], numStyles: number) => {
    const count = markers.length;
    let index = 1;
    if (count >= 2 && count <= 9) index = 1;       // BLUE
    if (count >= 10 && count <= 19) index = 2;     // YELLOW
    if (count >= 20 && count <= 29) index = 3;     // ORANGE
    if (count >= 30) index = 4;                    // RED
    return { text: String(count), index };
  };

  const TripMarker: React.FC<{
    trip: any;
    clusterer: any;
    truckIcon: any;
    onMouseOver: (trip: any) => void;
    onMouseOut: () => void;
  }> = ({ trip, clusterer, truckIcon, onMouseOver, onMouseOut }) => {
    const trackedLocation = useVehicleTracking(trip.tripId);

    const lat = trackedLocation?.lat
      ?? trip.vehicle?.currentLocation?.lat
      ?? 20.5937;
    const lng = trackedLocation?.lng
      ?? trip.vehicle?.currentLocation?.lng
      ?? 78.9629;

    return (
      <MarkerF
        position={{ lat: Number(lat), lng: Number(lng) }}
        icon={truckIcon}
        onMouseOver={() => onMouseOver(trip)}
        onMouseOut={onMouseOut}
        clusterer={clusterer}
      />
    );
  };

  return (
    <GoogleMap
      mapContainerStyle={containerStyle}
      center={center} // Fixed initial center
      zoom={5}
      onLoad={onMapLoad}
      options={{ styles: mapThemeStyle, gestureHandling: "cooperative" }}
    >
      <MarkerClustererF
        minimumClusterSize={2}
        styles={clusterStyles}
        calculator={clusterCalculator}
      >
        {(clusterer) => (
          <>
            {allLocations.map((trip, idx) => (
              <TripMarker
                key={`vehicle-${idx}`}
                trip={trip}
                clusterer={clusterer}
                truckIcon={truckIcon}
                onMouseOver={handleMarkerMouseOver}
                onMouseOut={handleMarkerMouseOut}
              />
            ))}


          </>
        )}
      </MarkerClustererF>

      {/* Info window for hovered marker */}
      {activeTrip && (
        <OverlayViewF
          position={{
            lat: Number(activeTrip.vehicle.currentLocation.lat),
            lng: Number(activeTrip.vehicle.currentLocation.lng),
          }}
          mapPaneName="overlayMouseTarget"
        >
          <div
            className="bg-white text-[14px] shadow-lg rounded-lg p-3 w-[220px] text-black border border-gray-200"
            style={{ transform: "translate(-50%, -130%)" }}
          >
            <p className="font-semibold">Trip Ref: {activeTrip.tripRefId || "N/A"}</p>
            <p>Vehicle No: {activeTrip.vehicle.regNo || "N/A"}</p>
            <p>Type: {activeTrip.vehicle.type || "N/A"}</p>
            <p>Address: {activeTrip.vehicle.currentLocation?.address || "N/A"}</p>
            <p>Transporter: {activeTrip.transporter?.name || "N/A"}</p>
            <p>Driver: {activeTrip.driver?.name || "N/A"} ({activeTrip.driver?.phone || "N/A"})</p>
          </div>
        </OverlayViewF>
      )}
    </GoogleMap>
  );
};

export default ClusterMapComponent;
